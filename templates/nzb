#
# HTTPS server
#

ssl_certificate /etc/nginx/conf/server.crt;
ssl_certificate_key /etc/nginx/conf/server.key;

# redirect http => https
server {
	listen 80;

	if ($scheme = 'http') {
		rewrite ^/(.*)$ https://$host/$1 permanent;
	}
}


server {
	listen	443;
	ssl	on;
	server_name	start.DOMAIN;
	location / {
		proxy_pass http://localhost:8000/links;
	}
}


server {
	listen   443;
	ssl	on;
	server_name  couchpotato.DOMAIN;

	location / {
		proxy_pass http://localhost:5050;
	}
}

server {
	listen   443;
	ssl	on;
	server_name  sabnzbd.DOMAIN;

	location / {
		proxy_pass http://localhost:8080;
	}
}

server {
	listen   443;
	ssl	on;
	server_name  sickbeard.DOMAIN;

	location / {
		proxy_pass http://localhost:8081;
	}
}

server {
	listen   443;
	ssl	on;
	server_name  headphones.DOMAIN;

	location / {
		proxy_pass http://localhost:8181;
	}
}

server {
	listen   443;
	ssl	on;
	server_name  omv.DOMAIN;

	location / {
		proxy_pass http://localhost:8000;
	}
}

server {
	listen   443;
	ssl	on;
	server_name  ssh.DOMAIN;

	location / {
		proxy_pass http://localhost:4200;
	}
}

server {
	listen   443;
	ssl	on;
	server_name  beet.DOMAIN;

	location / {
		proxy_pass http://localhost:8337;
	}
}

server {
	listen   443;
	ssl	on;
	server_name  music.DOMAIN;
 	
	location / {
                proxy_pass http://localhost:4040;
        }
 }

server {
	listen 443;
	ssl	on;
	server_name ow.DOMAIN;

	root /var/www/glype;

	location / {
		index index.php;
	}

	location ~ /(tmp|settings.php) {
   		deny all;
   		return 404;
	}

	location ~ \.php {
		auth_basic "Restricted";
                auth_basic_user_file /etc/nginx/htpasswd;
 

		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		# A handy function that became available in 0.7.31 that breaks down 
		# The path information based on the provided regex expression
		# This is handy for requests such as file.php/some/paths/here/ 
		fastcgi_param  PATH_INFO        $fastcgi_path_info;
		fastcgi_param  HTTPS		1;
		include /etc/nginx/fastcgi_params;
        	fastcgi_pass unix:/tmp/php.socket;
	}
}


server {
	listen   443;
	ssl	on;
	server_name  cloud.DOMAIN;
 	
        location / {
               proxy_pass http://localhost:8888/;
        }
}
